/*************************************************************************************
* qTESLA: an efficient post-quantum signature scheme based on the R-LWE problem
*
* Abstract: CDT constants for the Gaussian sampler
**************************************************************************************/

#ifndef CDTSAMP
#define CDTSAMP

#include <stdint.h>
#include "params.h"


// Sigma = 8.5, 64-bit precision

#define CDT_ROWS 79
#define CDT_COLS 1

static const int64_t cdt_v[CDT_ROWS*CDT_COLS] = {
    0x0000000000000000LL, // 0
    0x0601F22A500CC7A8LL, // 1
    0x11F09FFA2C5FC47BLL, // 2
    0x1DA089E986E44DD0LL, // 3
    0x28EAB25D098A3FC4LL, // 4
    0x33AC2F2629FB74E1LL, // 5
    0x3DC767DC8ACB92C0LL, // 6
    0x4724FC6266858F15LL, // 7
    0x4FB448F4A453A0DALL, // 8
    0x576B8599E84680FELL, // 9
    0x5E4786DA642175EDLL, // 10
    0x644B2C928636728DLL, // 11
    0x697E90CEEF86C587LL, // 12
    0x6DEE0B964F31939CLL, // 13
    0x71A92144AECBF9C8LL, // 14
    0x74C16FD53C541320LL, // 15
    0x7749AC921BE6DDD7LL, // 16
    0x7954BFA4500F2512LL, // 17
    0x7AF5067A5DB840A0LL, // 18
    0x7C3BC17C247ABCF5LL, // 19
    0x7D38AD76552703B2LL, // 20
    0x7DF9C5DF1D0D194ELL, // 21
    0x7E8B2ABA31CB9022LL, // 22
    0x7EF7237C012104E5LL, // 23
    0x7F4637C5DB74A24BLL, // 24
    0x7F7F570794A5DBD7LL, // 25
    0x7FA808CC46520B31LL, // 26
    0x7FC4A083D37BE5AALL, // 27
    0x7FD870CA844EAAAFLL, // 28
    0x7FE5FB5D7DF05836LL, // 29
    0x7FEF1BFAD80746C4LL, // 30
    0x7FF52D4E62D85918LL, // 31
    0x7FF927BA255CA95DLL, // 32
    0x7FFBBA43E93981C4LL, // 33
    0x7FFD5E3D8A495B23LL, // 34
    0x7FFE6664A6AF0B69LL, // 35
    0x7FFF0A4116522D02LL, // 36
    0x7FFF6E8126587ADFLL, // 37
    0x7FFFAAFE9B78D7DBLL, // 38
    0x7FFFCEFDF43C5A28LL, // 39
    0x7FFFE41E98DD822ALL, // 40
    0x7FFFF059632A0790LL, // 41
    0x7FFFF754BBBA1A80LL, // 42
    0x7FFFFB43173D3045LL, // 43
    0x7FFFFD71ED7035C3LL, // 44
    0x7FFFFEA3FCCD43D9LL, // 45
    0x7FFFFF494DEDC322LL, // 46
    0x7FFFFFA15F462D28LL, // 47
    0x7FFFFFCFA48F7D91LL, // 48
    0x7FFFFFE79E824F8DLL, // 49
    0x7FFFFFF3DF54D3FALL, // 50
    0x7FFFFFFA0C61A0E6LL, // 51
    0x7FFFFFFD1E52AF77LL, // 52
    0x7FFFFFFE9FA52863LL, // 53
    0x7FFFFFFF59F5AC1BLL, // 54
    0x7FFFFFFFB2CF525FLL, // 55
    0x7FFFFFFFDC993BFELL, // 56
    0x7FFFFFFFEFFB9990LL, // 57
    0x7FFFFFFFF8D9D13CLL, // 58
    0x7FFFFFFFFCDA22DDLL, // 59
    0x7FFFFFFFFEA1F462LL, // 60
    0x7FFFFFFFFF6A0113LL, // 61
    0x7FFFFFFFFFC09859LL, // 62
    0x7FFFFFFFFFE58F81LL, // 63
    0x7FFFFFFFFFF51FC6LL, // 64
    0x7FFFFFFFFFFB9636LL, // 65
    0x7FFFFFFFFFFE3BC3LL, // 66
    0x7FFFFFFFFFFF4D6ELL, // 67
    0x7FFFFFFFFFFFBA72LL, // 68
    0x7FFFFFFFFFFFE546LL, // 69
    0x7FFFFFFFFFFFF5DFLL, // 70
    0x7FFFFFFFFFFFFC36LL, // 71
    0x7FFFFFFFFFFFFE9ALL, // 72
    0x7FFFFFFFFFFFFF7ELL, // 73
    0x7FFFFFFFFFFFFFD1LL, // 74
    0x7FFFFFFFFFFFFFEFLL, // 75
    0x7FFFFFFFFFFFFFFALL, // 76
    0x7FFFFFFFFFFFFFFELL, // 77
    0x7FFFFFFFFFFFFFFFLL, // 78
}; // cdt_v

// memory requirements:
//     2048 samples: 25524 bytes
//     1024 samples: 13236 bytes
//      512 samples:  7092 bytes
//      256 samples:  4020 bytes
//      128 samples:  2484 bytes
//       64 samples:  1716 bytes
//       32 samples:  1332 bytes
// table alone: 632 bytes

#endif 